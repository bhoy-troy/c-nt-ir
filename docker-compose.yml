
version: '3.9'

services:

  mariadb:
    image: 'mariadb/server:10.3'
    #    build: images/mariadb
    container_name: mariadb
    hostname: db.hass
    environment:
      MARIADB_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_DATABASE: "${HA_MYSQL_DB}"
      MYSQL_USER: "${HA_MYSQL_USER}"
      MYSQL_PASSWORD: "${HA_MYSQL_PASSWORD}"
    ports:
      - '3306:3306'
#    volumes:
#      - ${PWD}/mariadb:/var/lib/mysql


  # Deconz
#  deconz:
#    container_name: deconz
#    image: marthoc/deconz
#    restart: unless-stopped
#    network_mode: host
#    environment:
#      # You can access Deconz at this port
#      DECONZ_WEB_PORT: 8080
#      DECONZ_WS_PORT: 8088
#
#      # Set VNC_MODE to 0 to disable it completely
#      DECONZ_VNC_MODE: 1
#      DECONZ_VNC_PORT: 5900
#      DECONZ_VNC_PASSWORD: "${VNC_PASSWORD}"
#    volumes:
#      - /etc/localtime:/etc/localtime:ro
#      - /etc/timezone:/etc/timezone:ro
#      # Replace <local path> with a path where all deconz config will be stored.
#      - deconz:/root/.local/share/dresden-elektronik/deCONZ
#    devices:
#      - "/dev/ttyUSB0:/dev/ttyUSB0"

  homeassistant:
    image: linuxserver/homeassistant:version-2021.9.5
#    image: homeassistant/home-assistant
#    build:
#      context: images/home-assistant
    container_name: home-assistant
    hostname: hass.hass
    links:
      - "mariadb:db_hass"
    volumes:
      # Local path where your home assistant config will be stored
      - ./config/home_assistant:/config
      - ./config/home_assistant/configuration.yaml:/config/configuration.yaml
      - ./config/home_assistant/scenes.yaml:/config/scenes.yaml
      - ./config/home_assistant/scripts.yaml:/config/scripts.yaml
      - ./config/home_assistant/secrets.yaml:/config/secrets.yaml
      - ./config/home_assistant/groups.yaml:/config/groups.yaml
      - ./config/home_assistant/automations.yaml:/config/automations.yaml
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket
#    restart: unless-stopped
#    network_mode: host
    depends_on:
      # MariaDB is optional (only if you would like to use a different database for HA).
      - mariadb
      # Deconz is optional (only if you use the deconz Zigbee hub).
#      - deconz
    environment:
      - PUID=${LOCAL_USER}
      - PGID=${LOCAL_GROUP}
      - TZ=Europe/Dublin
    ports:
      - '8123:8123'

  # Node-RED
#  nodered:
#    container_name: nodered
#    image: nodered/node-red-docker:slim-v10
#    ports:
#      - "1880:1880"
#    volumes:
#      # Local path where all Node-RED config will be stored.
#      - ./nodered:/data
#    depends_on:
#      - homeassistant
#    environment:
#      TZ: "Europe/Dublin"
#    user: "${LOCAL_USER}:${LOCAL_GROUP}"
#    restart: unless-stopped


  # AppDaemon
#  appdaemon:
#    container_name: appdaemon
#    restart: unless-stopped
#    image: acockburn/appdaemon:latest
#    environment:
#      HA_URL: "http://${SERVER_IP}:8123"
#      TOKEN: "${HA_APPDAEMON_KEY}"
#      DASH_URL: "http://${SERVER_IP}:5050"
#    ports:
#      - "5050:5050"
#    volumes:
#      # Set which local directory will contain all your app daemon configuration
#      - appdaemon:/conf
#    depends_on:
#      - homeassistant
#    user: "${LOCAL_USER}:${LOCAL_GROUP}"


#
#  hass-configurator:
#    image: "causticlab/hass-configurator-docker:latest"
#    container_name: hass-configurator
##    restart: unless-stopped
#    ports:
#      - "3218:3218/tcp"
#    depends_on:
#      - homeassistant
#    volumes:
#      - "./configurator-config:/config"
#      - "./hass-config:/hass-config"
#      - "./hass-run:/run"
#    user: "${LOCAL_USER}:${LOCAL_GROUP}"
#
#  plex:
#    container_name: plex
#    image: plexinc/pms-docker
##    restart: unless-stopped
#    ports:
#      - 32400:32400/tcp
#      - 3005:3005/tcp
#      - 8324:8324/tcp
#      - 32469:32469/tcp
#      - 1900:1900/udp
#      - 32410:32410/udp
#      - 32412:32412/udp
#      - 32413:32413/udp
#      - 32414:32414/udp
#    environment:
#      TZ: "Europe/Dublin"
#      PLEX_CLAIM: 'claimToken'
#      ADVERTISE_IP: 'http://127.0.0.1:32400/'
#    hostname: plex.hass
#    volumes:
#      - './plex/config:/config'
#      - './plex/transcode:/transcode'
#      - './plex/media:/data'
  ## plex
  plex:
    image: hotio/plex
    container_name: plex
    hostname: plex.hass
    restart: unless-stopped
    volumes:
      - './config/plex:/config'
      - './data/plex:/data'
      - './transcode/plex:/transcode'

    environment:
      - PUID=${LOCAL_USER}
      - PGID=${LOCAL_GROUP}
      - TZ=Europe/Dublin

  radarr:
    image: linuxserver/radarr
    container_name: radarr
    hostname: radarr.hass
    ports:
      - "7878:7878" # port mapping
    volumes:
      - "./config/radarr:/config" # config directory for radarr
      - "./storage/downloads/complete:/downloads" # completed downloads directory from sab
      - "./storage/movies:/storage/Movies" # where radarr will copy your movies. add as many of these as you need
    environment:
      - PUID=${LOCAL_USER}
      - PGID=${LOCAL_GROUP}
      - TZ=Europe/Dublin

  sonarr:
    image: ghcr.io/linuxserver/sonarr
    container_name: sonarr
    hostname: sonarr.hass
    environment:
      - PUID=${LOCAL_USER}
      - PGID=${LOCAL_GROUP}
      - TZ=Europe/Dublin
    volumes:
      - "./config/sonarr:/config" # sonarr config dir
      - "./storage/downloads/complete:/downloads" # your completed downloads directory from sab
      - "./storage/tv:/storage/TV" # where it will copy your files when done. add as many of these as you need
    ports:
      - 8989:8989
##    restart: unless-stopped

  ## SABnzbd
  sabnzbd:
    image: hotio/sabnzbd
    container_name: sabnzbd
    hostname: sabnzbd.hass
    volumes:
      - "./config/sabnzbd:/config" # sab config directory
      - "./storage/downloads/complete:/downloads" # completed directory for downloads. this contains the category directories
      - "./downloads/incomplete:/incomplete-downloads" # "temp" directory for downloads
    ports:
      - "8080:8080"
    environment:
      - PUID=${LOCAL_USER}
      - PGID=${LOCAL_GROUP}
      - TZ=Europe/Dublin


  jackett:
    image: linuxserver/jackett
    container_name: jackett

    hostname: jackett.hass
#    restart: unless-stopped
    ports:
      - 9117:9117
    volumes:
      - ./config/jackett:/config
    environment:
      - PUID=${LOCAL_USER}
      - PGID=${LOCAL_GROUP}
      - TZ=Europe/Dublin


  mosquitto:
    image: library/eclipse-mosquitto:latest
    container_name: mosquitto
    hostname: mqtt.hass
    ports:
      - "1883:1883"
      - "1884:1884"
    volumes:
      - "./config/mosquitto:/mosquitto/config"
      - "./data/mosquitto:/mosquitto/data"
      - "./log/mosquitto:/mosquitto/log"
    environment:
      - PUID=${LOCAL_USER}
      - PGID=${LOCAL_GROUP}
      - TZ=Europe/Dublin
#    user: "${LOCAL_USER}:${LOCAL_GROUP}"

#  traefik:
#    image: library/traefik:v1.7.30-alpine
#    depends_on:
#      - frigate
#    command:
#      - "--accesslog=true"
#      - "--api.insecure=true"
#      - "--providers.docker=true"
#      - "--providers.docker.exposedbydefault=false"
#      - "--entrypoints.web.address=:80"
#      - "--entrypoints.websecure.address=:443"
#      - "--certificatesresolvers.mydnschallenge.acme.dnschallenge=true"
#      - "--certificatesresolvers.mydnschallenge.acme.dnschallenge.provider=linodev4"
#      - "--certificatesresolvers.mydnschallenge.acme.email=rob@webworxshop.com"
#      - "--certificatesresolvers.mydnschallenge.acme.storage=/letsencrypt/acme.json"
#    volumes:
#      - ./traefik-eomer:/letsencrypt
#      - /var/run/docker.sock:/var/run/docker.sock
#    ports:
#      - "80:80"
#      - "443:443"
#      - "8081:8080"
#    environment:
#      - LINODE_TOKEN=ccea43b80ac7fc52089eb21f032a07f934982e1d405de3ddc841b44d98f46c10
#    restart: always

  influxdb:
    image: influxdb:latest
    ports:
      - 8086:8086
    volumes:
      - ./data/influxdb:/var/lib/influxdb2
      - ./config/influxdb:/etc/influxdb2
    hostname: influxdb.hass

  #    restart: always

  grafana:
#    username & passwd for login is admin:admin
    image: grafana/grafana
#    build:
#      context: images/grafana
    ports:
      - 3000:3000
    volumes:
      - ./data/grafana:/var/lib/grafana
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource,percona-percona-app"
      GF_SECURITY_ADMIN_USER: "${GF_SECURITY_ADMIN_USER}"
      GF_SECURITY_ADMIN_PASSWORD: "${GF_SECURITY_ADMIN_PASSWORD}"
      GF_USERS_DEFAULT_THEME: "${GF_USERS_DEFAULT_THEME}"
      GF_USERS_ALLOW_SIGN_UP=: "${GF_USERS_ALLOW_SIGN_UP}"
      GF_USERS_ALLOW_ORG_CREATE: "${GF_USERS_ALLOW_ORG_CREATE}"
      GF_AUTH_ANONYMOUS_ENABLED: "${GF_AUTH_ANONYMOUS_ENABLED}"
    hostname: grafana.hass
    depends_on:
      - influxdb
#    restart: always

#  frigate:
#    privileged: true
##    restart: unless-stopped
#    image: blakeblackshear/frigate:stable-amd64
#    devices:
#      - /dev/bus/usb:/dev/bus/usb
#      - /dev/dri/card0
#    volumes:
#      - /etc/localtime:/etc/localtime:ro
#      - ./config/home_assistant/frigate.yaml:/config/config.yml:ro
#      - ./frigate:/media/frigate
#      - type: tmpfs
#        target: /tmp/cache
#        tmpfs:
#          size: 1000000000
#    labels:
#      - 'traefik.enable=true'
#      - "traefik.http.middlewares.frigate_redirect.redirectscheme.scheme=https"
#      - "traefik.http.routers.frigate_insecure.rule=Host(`frigate.home.webworxshop.com`)"
#      - "traefik.http.routers.frigate_insecure.entrypoints=web"
#      - "traefik.http.routers.frigate_insecure.middlewares=frigate_redirect@docker"
#      - "traefik.http.routers.frigate.rule=Host(`frigate.home.webworxshop.com`)"
#      - "traefik.http.routers.frigate.entrypoints=websecure"
#      - "traefik.http.routers.frigate.tls.certresolver=mydnschallenge"
#      - "traefik.http.services.frigate.loadbalancer.server.port=5000"
#    ports:
#      - "1935:1935"
#    env_file:
#      - frigate.env


#  nginx:
#    build: images/nginx
##    image: jtroy/nginx
##    container_name: nginx
#    env_file:
#      - ./config.env
#    volumes:
#      - james-troy_nginx_ssl:/etc/nginx/ssl
#      - james-troy_certbot_certs:/etc/letsencrypt
#      - home_james-troy_com_certbot:/var/www/certbot/test1.james-troy.com
#      - hass_james-troy_com_certbot:/var/www/certbot/test2.james-troy.com
#      - ./html:/var/www/html/home.james-troy.com
#      - ./html:/var/www/html/hass.james-troy.com
#    ports:
#      - "80:80"
#      - "443:443"
#    restart: always

#  certbot:
#    build: images/certbot
##    image: jtroy/certbot
#    env_file:
#      - ./config.env
#    volumes:
#      - james-troy_certbot_certs:/etc/letsencrypt
#      - home_james-troy_com_certbot:/var/www/certbot/test1.james-troy.com
#      - hass_james-troy_com_certbot:/var/www/certbot/test2.james-troy.com
##    depends_on:
#      - nginx
#
#  cron:
#    build: images/cron
##    image: james-troy/cron
#    environment:
#      COMPOSE_PROJECT_NAME: "${COMPOSE_PROJECT_NAME}"
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - ./:/workdir:ro
#    depends_on:
#      - nginx
#      - certbot

  agent:
    image: portainer/agent
    environment:
      # REQUIRED: Should be equal to the service name prefixed by "tasks." when
      # deployed inside an overlay network
      AGENT_CLUSTER_ADDR: tasks.agent
      # AGENT_PORT: 9001
      # LOG_LEVEL: debug
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
#    networks:
#      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  portainer:
    image: portainer/portainer
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - "9000:9000"
      - "8000:8000"
    volumes:
      - ./data/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
#    networks:
#      - agent_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
#    restart: unless-stopped
    environment:
      - PUID=${LOCAL_USER}
      - PGID=${LOCAL_GROUP}
      - TZ=Europe/Dublin


  speedtest:
    image: atribe/speedtest-for-influxdb-and-grafana
    container_name: speedtest

    volumes:
      - ./config/speedtest/config.ini:/src/config.ini
    #    restart: always
    depends_on:
      - influxdb


  transmission:
    image: ghcr.io/linuxserver/transmission
    container_name: transmission
    hostname: transmission.hass
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
#      - TRANSMISSION_WEB_HOME=/combustion-release/ #optional
#      - USER=username #optional
#      - PASS=password #optional
#      - WHITELIST=iplist #optional
#      - HOST_WHITELIST=dnsnane list #optional
    volumes:
      - "./config/transmission:/config" # sab config directory
      - "./storage/downloads:/downloads/complete" # completed directory for downloads. this contains the category directories
      - "./downloads/incomplete:/downloads/incomplete" # "temp" directory for downloads
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp
#    restart: unless-stopped

  adguard:
    image: adguard/adguardhome
    container_name: adguard
    hostname: adguard.hass
#    restart: unless-stopped
    volumes:
      - './adguard/work:/opt/adguardhome/work'
      - './adguard/conf:/opt/adguardhome/conf'
    ports:
      - '53:53/tcp'
      - '53:53/udp'
      - '67:67/udp'
#      - '68:68/udp'
      - '9080:80/tcp'
      - '9443:443/tcp'
      - '9443:443/udp'
      - '3001:3000/tcp'
#      - '853:853/tcp'
#      - '784:784/udp'
#      - '853:853/udp'
#      - '8853:8853/udp'
#      - '5443:5443/tcp'
#      - '5443:5443/udp'

# Visual Studio code
  vscode:
    container_name: vscode
    image: codercom/code-server
    hostname: vscode.hass
    volumes:
      - ./data/vscode:/home/coder/.local/share/code-server
      - ./data/vscode/project:/home/coder/project
    ports:
      - "8280:8080"
    command: code-server --auth password --disable-telemetry /home/coder/project
    environment:
      PASSWORD: "${VSCODE_PASSWORD}"
#    restart: unless-stopped


volumes:
  james-troy_nginx_ssl:
    external: true
  james-troy_certbot_certs:
    external: true
  home_james-troy_com_certbot:
  hass_james-troy_com_certbot:
  portainer_data: